import Head from 'next/head';
import Image from 'next/image';
import { useEffect, useState, useRef } from 'react';
import { endpoints} from './api/photos';
import {Paginate} from '../components/pagination.styles';
import Pagination from '@mui/material/Pagination';
import { Search } from '../components/search.styles';
import { Photos } from '../components/photos/photos.styles';
import { Main } from '../styles/home.styles';
import CircularProgress from '@mui/material/CircularProgress';


export default function Home() {
  const [photos, setPhotos] = useState<any | null>(null);
  const [searchQuery, setSearchQuery] = useState<any | null>(undefined);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<any | null>(null);
 
  const formQuery = useRef(null);

  const getPhotos = async (page?: number) => { 
    setLoading(true);
    try {
      const data = await endpoints.getCuratedPhotos(page)
      console.log('data', data);
      if (!data) {
        setError('No Photos found')
      } else {
        setPhotos(data);
        setSearchQuery(null)
      }

    } catch (e) {
      console.log('error something went wrong', e);
      setError(`error something went wrong, ${e}`)
    } finally {
      setLoading(false);
    }
  }

  const queryPhotos = async (query: string, page?: number) => {
    setLoading(true);
    try {
      const data = await endpoints.getQueryPhotos(query, page)
      console.log('data', data);
      if (!data) {
        setError('No Photos found')
        setLoading(false);
      } else {
        setPhotos(data);
        setLoading(false);
        
      }

    } catch (e) {
      console.log('error something went wrong', e);
      setError(`error something went wrong, ${e}`)
      setLoading(false);
    }
  }

  useEffect(() => {
    const pageNumber = sessionStorage.getItem('page');
    const searchQuery = sessionStorage.getItem('searchQuery') || 'null';
   
    if (searchQuery !== 'null') {
      console.log('searchQuery init', searchQuery);
      queryPhotos(searchQuery, Number(pageNumber))
      setSearchQuery(searchQuery);
    } else {
      if (pageNumber) {
        getPhotos(Number(pageNumber));
      } else {
        getPhotos();
      }
    }
  }, [])
  
  const changePage = ((event, page) => {
    console.log('searchQuery change page', searchQuery);
    if (!searchQuery) {
      getPhotos(page)
    } else {
      queryPhotos(searchQuery, page);
    }

  })

  const querySearch = ((query) => {
    query.preventDefault();

    console.log('query', query?.target[0].value);
    const searchText = query?.target[0].value
    setSearchQuery(searchText)
    queryPhotos(searchText)
  })

  useEffect(() => {
    sessionStorage.setItem('page', photos?.page);
    sessionStorage.setItem('searchQuery', searchQuery);
  }, [photos, searchQuery]);

  return (
    <>
      <Head>
        <title>Photo Search</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Main data-testid='home'>

        <div className='header'>
          <button className='home' onClick={() => getPhotos(1)}>Home</button>
          <Search data-testid='search'>
            <div className='search-container'>
              <form ref={formQuery} onSubmit={querySearch}>
                <input 
                  className='search-bar' 
                  type="text" 
                  placeholder='Search...'
                  name="search" >
                </input>
                <button className='search-button'>
                  <span className="ico ico-mglass"></span>
                </button>
              </form>
                
            </div>
          </Search>
        </div>

        {error && <div>{error}</div>}

        {loading && <div className="loading">
          <CircularProgress size={100}/>
        </div>}
        
        <Photos>
          {photos?.photos?.map(photo => {
            return ( 
              <div className="photo_container" key={photo.id}>
                <Image 
                  src={photo.src.large}
                  alt={photo.alt}
                  width={photo.width / 10}
                  height={photo.height / 10}
                  />
                  <div className='info'>
                    {photo.photographer &&
                      <p>{photo.photographer}</p>
                    }
                    {photo.url && 
                      <a href={photo.url} target="_blank">Link</a>
                    }
                  </div>
              </div>
            )
          })}
        </Photos>

        {photos && 
          <Paginate>
            <Pagination
              count={Math.floor(photos.total_results / photos.per_page)}
              page={photos.page}
              siblingCount={3}
              onChange={changePage}
              size="large"
              className="resize"
            />
          </Paginate>
        }     
      </Main>
    </>
  )
}
